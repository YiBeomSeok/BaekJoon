//import java.util.*;
//import java.io.*;
//
//public class Main {
//
//    public static int N, max = 0;
//    public static int[] dx = {-1, 1, 0, 0}, dy = {0, 0, -1, 1};
//    public static int[][] map;
//
//    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//    public static void main(String[] args) throws IOException {
//        StringTokenizer st;
//
//        N = Integer.parseInt(br.readLine());
//        map = new int[N][N];
//
//        for(int i = 0; i < N; i++) {
//            st = new StringTokenizer(br.readLine(), " ");
//            for(int j = 0; j < N; j++) {
//                map[i][j] = Integer.parseInt(st.nextToken());
//                if(map[i][j] > max) max = map[i][j];
//            }
//        }
//
//        dfs(0);
//
//        System.out.print(max);
//    }
//
//    /**
//     *
//     * dir 방향(0: 상, 1: 하, 2: 좌, 3: 우)
//     *  2 2 2 2 2
//     *  4 4 4 4 4
//     *  4 4 4 4 4
//     *  8 8 8 8 8
//     *  4 4 4 4 4
//     */
//    public static void move(int dir) {
//        // 모든 원소에 대해 그 위치를 dx, dy 만큼 더한 값으로 옮길 수 있는 지 확인한다.
//        // 이 때 그 x, y가 0보다 작아지거나 N이 되는 순간이 되지 않도록 고려해야한다.
//        for(int i = 0; i < N; i++) {
//            for(int j = 0; j < N; j++) {
//                int nowX = i, nowY = j;
//                if(map[nowX][nowY] == 0) continue;
//
//                while((nowX > 0 && nowX < N) && (nowY > 0 && nowY < N)) {
//                    if(map[nowX][nowY] == 0) break;
//
//                    int pX = nowX + dx[dir];
//                    int pY = nowY + dy[dir];
//
//                    if(pX < 0 || pX == N) break;
//                    if(pY < 0 || pY == N) break;
//
//                    if(map[pX][pY] == map[nowX][nowY]) {
//                        map[pX][pY] += map[nowX][nowY];
//                        map[nowX][nowY] = 0;
//                        if(map[pX][pY] > max) max = map[pX][pY];
//                    } else if(map[pX][pY] == 0) {
//                        map[pX][pY] = map[nowX][nowY];
//                        map[nowX][nowY] = 0;
//                        nowX = pX;
//                        nowY = pY;
//                    } else
//                        break;
//                }
//            }
//        }
//    }
//
//    public static void dfs(int d) {
//        if(d == 5) return;
//
//        for(int i = 0; i < 4; i++) {
//            int[][] tmp = map.clone();
//            move(i);
//            dfs(d + 1);
//            map = tmp;
//        }
//    }
//}
